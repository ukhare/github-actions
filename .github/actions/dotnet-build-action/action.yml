name: "Building .NET Project"
description: "Restores, builds, and optionally uploads a .NET project."

inputs:
  project-name:
    description: "Name of the .NET project."
    required: true
  app-dir:
    description: "Path to the .csproj file."
    required: true
  app:
    description: "Name of the .NET application, must match the name of the .csproj file"
    required: true
  sln-pth:
    description: 'Path to the app sln file'
    required: false
  build-configuration:
    description: "Build configuration (e.g., Release, Debug)."
    required: false
    default: "Release"
  upload_build:
    description: "Set to true to upload the build artifacts."
    required: false
    default: "false"

runs:
  using: "composite"
  steps:

    - name: Validate project path
      shell: bash
      run: |
        if [ ! -f "${{ inputs.app-dir }}" ]; then
          echo "::error title=Missing Project File::The project file '${{ inputs.app-dir }}' does not exist."
          exit 1
        fi

    - name: Restore NuGet packages
      shell: bash
      run: |
        if ! dotnet restore "${{ inputs.app-dir }}"; then
          echo "::error title=Restore Failed::Failed to restore NuGet packages."
          exit 1
        fi

    - name: Build .NET project
      shell: bash
      run: |
        output_dir="./dotnet_build_output-${{ inputs.project-name }}"
        log_file="${{ inputs.project-name }}/build.log"

        mkdir -p "${{ inputs.project-name }}"
        dotnet build "${{ inputs.app-dir }}" \
          --configuration "${{ inputs.build-configuration }}" \
          --no-restore \
          -o "${output_dir}" \
          --verbosity diagnostic \
          | tee "${log_file}"

    - name: Annotate warnings and errors
      shell: bash
      run: |
        log_file="${{ inputs.project-name }}/build.log"
        awk '
        /: warning [A-Z0-9]+:/ {
            print "::warning title=Build Warning::" $0
        }
        /: error [A-Z0-9]+:/ {
            print "::error title=Build Error::" $0
        }
        ' "${log_file}"

    - name: Upload build artifacts
      if: ${{ inputs.upload_build == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ inputs.project-name }}
        path: ./dotnet_build_output-${{ inputs.project-name }}
        if-no-files-found: ignore
